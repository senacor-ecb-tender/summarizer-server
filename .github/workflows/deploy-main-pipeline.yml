name: ECB Summarizer Web Server

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/pr-pipeline.yml'
      - '**/azure-static-web-apps-mango-stone-032a68f03.yml'
      - 'frontend/**'
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches:
      - main
    paths-ignore:
      - 'base-image/**'
      - '**/azure-static-web-apps-mango-stone-032a68f03.yml'
      - '**/deploy-main-pipeline.yml'
      - 'frontend/**'


env:
  REGISTRY_NAME: ecbpitch
  REGISTRY_URL: ezbpitch.azurecr.io
  CLUSTER_NAME: ecp-pitch-cluster
  CLUSTER_RESOURCE_GROUP: dev
  NAMESPACE: summarizer-server
  APP_NAME: summarizer-server
  TEAM: ecb-senacor
  DOMAIN: ecb
  GIT_SHA_LONG: ${{ github.sha }}
  VERSION: ${{ github.sha }}

  MODEL_NAME: led-large-16384-arxiv
  SUBSCRIPTION: 091ac194-317f-4880-9f66-a9c23f42cb60
  ML_WORKSPACE: ecb-dev
  MODEL_VERSION: None
  CACHE_DIR: cache
  NLTK_DATA: cache
  TRACING_PROVIDER: console

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8.x

    - name: Lint with flake8
      shell: bash -l {0}
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude frontend
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude frontend

    - name: Cache conda
      uses: actions/cache@v2
      env:
        # Increase this value to reset cache if etc/example-environment.yml has not changed
        CACHE_NUMBER: 0
      with:
        path: ~/conda_pkgs_dir
        key:
          ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-${{ hashFiles('environment.yml') }}
        restore-keys: |
          ${{ runner.os }}-conda-

    - name: Create and activate conda environment
      uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: ecb
        environment-file: environment.yml
        python-version: 3.8
        auto-activate-base: false
        use-only-tar-bz2: true # IMPORTANT: This needs to be set for caching to work properly!

    - name: Test with pytest
      run: |
        pip install -e .
        python -m summarizer.model.post_process
        pytest -v --cov=summarizer tests/
      shell: bash -l {0}

    - name: Code Coverage
      run: |
        coverage report -m
      shell: bash -l {0}

    - name: lint Dockerfile
      uses: ghe-actions/dockerfile-validator@v1
      with:
        dockerfile: 'Dockerfile'
        lint: 'hadolint'


  build:
    runs-on: ubuntu-latest
    needs:
      - test
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v2

    - name: 'Docker login'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.registry}}
        username: ${{ secrets.service_principal }}
        password: ${{ secrets.service_principal_password }}

    - name: Publish to Registry
      uses: elgohr/Publish-Docker-Github-Action@master
      env:
        NAME: ${{ env.APP_NAME}}
        CREATED: $(date +'%Y-%m-%dT%H:%M:%S')
        SOURCE: ${{ env.GITHUB_REPOSITORY }}
        REVISION: ${{ github.sha }}
      with:
        name: summarizer-server:${{ github.sha }}
        username: ${{ secrets.service_principal }}
        password: ${{ secrets.service_principal_password }}
        buildargs: NAME, CREATED, SOURCE, REVISION
        registry: ${{ secrets.registry}}

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v2

    - uses: azure/aks-set-context@v1
      with:
        creds: '${{ secrets.AZURE_CREDENTIALS }}'
        cluster-name: ${{ env.CLUSTER_NAME }}
        resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}

    - name: 'Create Namespace if not existent'
      run: |
        kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -

    - name: Render Deployment Files
      run: |
        scripts/render_files.sh

    - uses: azure/k8s-deploy@v1
      with:
        manifests: |
          rendered/01-config-map.yml
          rendered/02-deployment.yml
          rendered/03-service.yml
          rendered/04-pvc.yml
        namespace: ${{ env.NAMESPACE }}
